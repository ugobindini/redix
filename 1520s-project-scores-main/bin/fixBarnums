#!/usr/bin/env perl
#
# Programmer:    Craig Stuart Sapp (craig@ccrma.stanford.edu)
# Creation Date: Sat Jan 27 10:48:15 PST 2024
# Last Modified: Sat Jan 27 11:21:31 PST 2024
# Filename:      fixBarnums
# Syntax:        perl 5
#
# Description:   If the first measure is labeled as a pickup meausre (by not having
#                a barline before the first note line in the score), the missing
#                barline will be added and the barlines will be renumbered.
#                Changes will be made in place within the same file.  Use "git diff"
#                to check the results.
#
# Usage:         fixBarnum
#                files in humdrum/*/*.krn will be checked.
#
#

use strict;

my $barnum = `which barnum`;
chomp $barnum;
die "Error: install barnum tool first from Humdrum Extras\n" if $barnum =~ /^\s*$/;

my @files = sort glob("humdrum/*/*.krn");

foreach my $file (@files) {
	processFile($file);
}

exit(0);

#################################################################


#############################
##
## processFile --
##

sub processFile {
	my ($filename) = @_;
	open(FILE, $filename) or die "Cannot read $filename\n";
	my @contents = <FILE>;
	close FILE;
	chomp @contents;
	if (@contents == 0) {
		die "Cannot find any contents in $filename\n";
	}

	my $firstNoteIndex = -1;
	my $firstBarlineIndex = -1;

	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		next if $line =~ /^\s*$/;
		next if $line =~ /^!!/;
		next if $line =~ /^\*/;
		if ($line =~ /^=/) {
			if ($firstBarlineIndex < 0) {
				$firstBarlineIndex = $i;
			}
		} else {
			if ($firstNoteIndex < 0) {
				$firstNoteIndex = $i;
			}
		}
		if (($firstBarlineIndex > 0) and ($firstNoteIndex > 0)) {
			last;
		}
	}

	my $ok = 0;
	if ($firstNoteIndex < 0) {
		# Strange error: no notes in score.
		return;
	}

	if ($firstBarlineIndex < 0) {
		# Strange error: no barlines in score.
		return;
	}

	if ($firstBarlineIndex < $firstNoteIndex) {
		# Barline before first note line, so nothing to do.
		$ok = 1;
	}

	# Need to insert a barline before note line and then renumber the barlines:

	if (!$ok) {
		# Create the barline:
		my @tokens = split(/\t+/, $contents[$firstNoteIndex]);
		my $barline = "";
		for (my $i=0; $i<@tokens; $i++) {
			$barline .= "=\t";
		}
		$barline =~ s/\t*$//;

		# Insert the barline before the first note line:
		$contents[$firstNoteIndex] = "$barline\n$contents[$firstNoteIndex]";

		# Update the file:
		print STDERR "Fixing barlines in $filename...\n";
		open(FILE, ">$filename") or die "Cannot write to $filename\n";
		for (my $i=0; $i<@contents; $i++) {
			print FILE "$contents[$i]\n";
		}
		close FILE;
	}

	# Now renumber the barlines:
	`rm -f temp`;
	my $command = "cat '$filename' | $barnum -r | $barnum -a > temp";
	`$command`;
	if (!-r "temp") {
		print STDERR "Problem processing $filename\n";
		return;
	} else {
		open(FILE, "temp") or die "Cannot open temp file\n";
		my @tempdata = <FILE>;
		close FILE;
		if (@tempdata == 0) {
			print STDERR "Empty contents for output for $filename (so not replacing)\n";
			return;
		}
		if (@tempdata == 1) {
			if ($tempdata[0] =~ /^\s*$/) {
				print STDERR "Bad contents for output of $filename (so not replacing)\n";
				return;
			}
		}
		`mv -f temp "$filename"`;

	}
	if (-r "temp") {
		print STDERR "Problem updating barlines in $filename\n";
	}

	# There can be internal problems with time signatures, these can
	# be fixed by correcting the time signature (such as 2/2 to 2/1)
	# before running this script, or type this command to fix one file:
	# barnum -r input.krn | barnum -a > output.krn && mv output.krn input.krn
	#
	# As a for loop in the bash terminal to fix all files in a directory::
	#
	# for file in *.krn
	#    barnum -r "$file.krn" | barnum -a > "$file-temp" && mv "$file-temp" "$file"
	# done
	#

}



